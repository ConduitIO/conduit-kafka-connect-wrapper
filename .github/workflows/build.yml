name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  # Unit tests and the Sonar analysis is done in a single job
  # because SonarCloud requires the test coverage report,
  # which is generated after unit tests are executed.
  # It's possible to do it in separate jobs (so it appears a bit prettier in the PR checks),
  # but that requires the jobs to share the report (which can be done, but doesn't pay out).
  test-analyze:
    name: Test and analyze code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install test library to local Maven repo
        # Not available in a public Maven repo, so we need to provide a pre-built artifact,
        # and install to the local Maven repo.
        run: mvn install:install-file -Dfile=libs/jdbc-connector-for-apache-kafka-6.7.0.jar -DgroupId=io.aiven -DartifactId=jdbc-connector-for-apache-kafka -Dversion=6.7.0 -Dpackaging=jar

      - name: Test and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # Skipping the tests as they have already been run above
        # -B (batch mode) to suppress progress (pollutes logs)
        # -DskipITs to skip integration tests (they are run in a separate job)
        # -Pcoverage to use a Maven profile, which generates a test coverage report
        run: mvn -B -DskipITs -Pcoverage verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=conduitio -Dsonar.projectKey=conduit-kafka-connect-wrapper -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  integration-tests:
    # Run separately, because they do not affect the code analysis,
    # and because it will help get the unit tests and SonarCloud results sooner.
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Start Postgres
        run: docker compose -f src/test/resources/docker-compose.yml up -d --wait

      - name: Install test library to local Maven repo
        # Not available in a public Maven repo, so we need to provide a pre-built artifact,
        # and install to the local Maven repo.
        run: mvn install:install-file -Dfile=libs/jdbc-connector-for-apache-kafka-6.7.0.jar -DgroupId=io.aiven -DartifactId=jdbc-connector-for-apache-kafka -Dversion=6.7.0 -Dpackaging=jar

      - name: Run intergration tests
        run: mvn integration-test verify
