package io.conduit;

import java.util.Map;

import org.apache.kafka.connect.data.Field;
import org.apache.kafka.connect.data.Schema;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

class DestinationConfigTest {
    @Test
    public void testFromNullMap() {
        assertNotNull(DestinationConfig.fromMap(null));
    }

    @Test
    public void testSchemaAutogenerateDefault() {
        DestinationConfig cfg = DestinationConfig.fromMap(Map.of());
        assertFalse(cfg.isSchemaAutogenerate());
    }

    @Test
    public void testSchemaAutogenerateFalse() {
        DestinationConfig cfg = DestinationConfig.fromMap(Map.of("wrapper.schema.autogenerate.enabled", "false"));
        assertFalse(cfg.isSchemaAutogenerate());
    }

    @Test
    public void testSchemaAutogenerateTrue() {
        DestinationConfig cfg = DestinationConfig.fromMap(Map.of("wrapper.schema.autogenerate.enabled", "true"));
        assertTrue(cfg.isSchemaAutogenerate());
    }

    @Test
    public void testParseSchema() {
        DestinationConfig cfg = DestinationConfig.fromMap(Map.of(
                "wrapper.schema", "{\"type\":\"struct\",\"fields\":[{\"type\":\"boolean\",\"optional\":true,\"field\":\"joined\"}],\"name\":\"customers\"}"
        ));
        assertSchemaOk(cfg.getSchema());
    }

    @Test
    public void testParseSchemaOverrides() {
        DestinationConfig cfg = DestinationConfig.fromMap(Map.of(
                "wrapper.schema.autogenerate.overrides", "{\"type\":\"struct\",\"fields\":[{\"type\":\"boolean\",\"optional\":true,\"field\":\"joined\"}],\"name\":\"customers\"}"
        ));
        assertSchemaOk(cfg.getOverrides());
    }

    private void assertSchemaOk(Schema schema) {
        assertNotNull(schema);
        assertEquals(Schema.Type.STRUCT, schema.type());
        assertEquals("customers", schema.name());
        assertEquals(1, schema.fields().size());
        Field field = schema.field("joined");
        assertEquals("joined", field.name());
        assertEquals(Schema.OPTIONAL_BOOLEAN_SCHEMA, field.schema());
    }
}
